[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://textures/grid.png" type="Texture" id=1]
[ext_resource path="res://models/ground/Tiles074_2K_NormalDX.png" type="Texture" id=2]
[ext_resource path="res://models/ground/Tiles074_2K_Roughness.png" type="Texture" id=3]

[sub_resource type="Shader" id=17]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D noise;
varying vec3 noise_triplanar_pos;
uniform float speed_mult = 1.0;
uniform float emission_mult = 1.0;

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	float offset = TIME*speed_mult;
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset + vec3(0.0,0.0,-offset);
	noise_triplanar_pos = uv1_triplanar_pos;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);

	
	vec2 uv_adjust = UV * uv1_scale.xy + uv1_offset.xy;
	//float heightmap = smoothstep(0.6, 0.9, texture(noise,uv_adjust+vec2(0,offset.z)).r);
	float grad = abs((UV.x*2.0)-1.0);
	grad = smoothstep(0.0,0.3,grad);
	float heightmap = texture(noise, UV+vec2(0.0,-offset)/(uv1_scale.x*uv1_scale.z)).r;
	heightmap = smoothstep(0.35,1.0, heightmap+(grad*0.2));
	VERTEX = VERTEX + (vec3(0,heightmap*grad,0)*10.0);
}




void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	float noise_tex = smoothstep(0.2,0.9,triplanar_texture(noise,uv1_power_normal,noise_triplanar_pos).r);
	
	ALBEDO = albedo.rgb * albedo_tex.rgb * noise_tex;
	EMISSION = albedo.rgb * albedo_tex.rgb * 3.0 * noise_tex;
	METALLIC = metallic;
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[sub_resource type="OpenSimplexNoise" id=23]

[sub_resource type="NoiseTexture" id=24]
width = 1024
height = 1024
seamless = true
noise = SubResource( 23 )

[resource]
shader = SubResource( 17 )
shader_param/albedo = Color( 1, 0.72549, 0.376471, 1 )
shader_param/specular = 0.5
shader_param/metallic = 1.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 4, 4, 4 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/speed_mult = 0.1
shader_param/emission_mult = 3.0
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_roughness = ExtResource( 3 )
shader_param/texture_normal = ExtResource( 2 )
shader_param/noise = SubResource( 24 )
