[gd_scene load_steps=9 format=2]

[sub_resource type="QuadMesh" id=2]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
render_mode unshaded, depth_test_disable, cull_disabled;

uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_emission: hint_albedo;

uniform vec4 emission_color : hint_color = vec4(1);
uniform float emission_amount;

uniform bool invert;

uniform sampler2D dissolve_texture;
uniform float burn_size : hint_range(0,2);
uniform float dissolve_amount : hint_range(0,1);


void fragment() {
	float sample = texture(dissolve_texture, UV).r;
	float emission_value = 1.0 - smoothstep(dissolve_amount, dissolve_amount + burn_size, sample);

	/*
	if (invert==true){
		EMISSION = vec3(1.0,1.0,1.0) - ( vec3(emission_value * emission_amount * emission_color.rgb));
	}
	else if (invert==false) {
		EMISSION = vec3(emission_value * emission_amount * emission_color.rgb);
	}
	*/
	
	ALBEDO = vec3(emission_value * emission_amount * emission_color.rgb);
	ALPHA = smoothstep(dissolve_amount - burn_size, dissolve_amount, sample);
}

void vertex(){
	
}"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
render_priority = 5
shader = SubResource( 3 )
shader_param/albedo = null
shader_param/emission_color = Color( 1.44, 0.74, 0.09, 1 )
shader_param/emission_amount = 0.5
shader_param/invert = false
shader_param/burn_size = 0.0
shader_param/dissolve_amount = 0.0
shader_param/dissolve_texture = SubResource( 5 )

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material/0:shader_param/dissolve_amount")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:material/0:shader_param/burn_size")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=1]
resource_name = "fade"
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ false, true, true ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material/0:shader_param/dissolve_amount")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.1, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:material/0:shader_param/burn_size")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.1, 0.5, 1 ),
"transitions": PoolRealArray( 1, -0.5, -2 ),
"update": 0,
"values": [ 0.0, 0.25, 0.0 ]
}

[sub_resource type="Animation" id=8]
resource_name = "fade_out"

[node name="UITransition" type="MeshInstance"]
visible = false
mesh = SubResource( 2 )
material/0 = SubResource( 6 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 7 )
anims/fade = SubResource( 1 )
anims/fade_out = SubResource( 8 )

[node name="MeshInstance" type="MeshInstance" parent="."]
